openapi: 3.0.3
info:
  title: ScriptWriting project user service
  version: 1.0.0
  description: This is one of the service of a first 3 service
paths:
  /usermodule/api/v1/advice/{advice_uuid}/:
    get:
      operationId: usermodule_api_v1_advice_retrieve
      parameters:
      - in: path
        name: advice_uuid
        schema:
          type: string
        required: true
      tags:
      - usermodule
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: usermodule_api_v1_advice_update
      parameters:
      - in: path
        name: advice_uuid
        schema:
          type: string
        required: true
      tags:
      - usermodule
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: usermodule_api_v1_advice_destroy
      parameters:
      - in: path
        name: advice_uuid
        schema:
          type: string
        required: true
      tags:
      - usermodule
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /usermodule/api/v1/advices/:
    get:
      operationId: usermodule_api_v1_advices_retrieve
      tags:
      - usermodule
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: usermodule_api_v1_advices_create
      tags:
      - usermodule
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /usermodule/api/v1/change-password/:
    post:
      operationId: usermodule_api_v1_change_password_create
      tags:
      - usermodule
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /usermodule/api/v1/create-payment-intent/:
    post:
      operationId: usermodule_api_v1_create_payment_intent_create
      tags:
      - usermodule
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /usermodule/api/v1/get-glossary/{uid}/:
    get:
      operationId: usermodule_api_v1_get_glossary_retrieve
      parameters:
      - in: path
        name: uid
        schema:
          type: string
        required: true
      tags:
      - usermodule
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: usermodule_api_v1_get_glossary_update
      parameters:
      - in: path
        name: uid
        schema:
          type: string
        required: true
      tags:
      - usermodule
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: usermodule_api_v1_get_glossary_destroy
      parameters:
      - in: path
        name: uid
        schema:
          type: string
        required: true
      tags:
      - usermodule
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /usermodule/api/v1/get-plan/{plan_uuid}/:
    get:
      operationId: usermodule_api_v1_get_plan_retrieve
      parameters:
      - in: path
        name: plan_uuid
        schema:
          type: string
        required: true
      tags:
      - usermodule
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: usermodule_api_v1_get_plan_update
      parameters:
      - in: path
        name: plan_uuid
        schema:
          type: string
        required: true
      tags:
      - usermodule
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: usermodule_api_v1_get_plan_destroy
      parameters:
      - in: path
        name: plan_uuid
        schema:
          type: string
        required: true
      tags:
      - usermodule
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /usermodule/api/v1/get-user-by-email/{email}/:
    get:
      operationId: usermodule_api_v1_get_user_by_email_retrieve
      parameters:
      - in: path
        name: email
        schema:
          type: string
        required: true
      tags:
      - usermodule
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /usermodule/api/v1/get-user-by-id/{id}/:
    get:
      operationId: usermodule_api_v1_get_user_by_id_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - usermodule
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /usermodule/api/v1/glossaries/:
    get:
      operationId: usermodule_api_v1_glossaries_retrieve
      tags:
      - usermodule
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: usermodule_api_v1_glossaries_create
      tags:
      - usermodule
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /usermodule/api/v1/idea-move-to-folder/:
    put:
      operationId: usermodule_api_v1_idea_move_to_folder_update
      tags:
      - usermodule
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /usermodule/api/v1/idea-spark-folder/{idea_spark_folder_uuid}/:
    get:
      operationId: usermodule_api_v1_idea_spark_folder_retrieve
      parameters:
      - in: path
        name: idea_spark_folder_uuid
        schema:
          type: string
        required: true
      tags:
      - usermodule
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: usermodule_api_v1_idea_spark_folder_update
      parameters:
      - in: path
        name: idea_spark_folder_uuid
        schema:
          type: string
        required: true
      tags:
      - usermodule
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: usermodule_api_v1_idea_spark_folder_destroy
      parameters:
      - in: path
        name: idea_spark_folder_uuid
        schema:
          type: string
        required: true
      tags:
      - usermodule
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /usermodule/api/v1/idea-spark-folders/:
    get:
      operationId: usermodule_api_v1_idea_spark_folders_retrieve
      tags:
      - usermodule
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: usermodule_api_v1_idea_spark_folders_create
      tags:
      - usermodule
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /usermodule/api/v1/idea-spark/{idea_spark_uuid}/:
    get:
      operationId: usermodule_api_v1_idea_spark_retrieve
      parameters:
      - in: path
        name: idea_spark_uuid
        schema:
          type: string
        required: true
      tags:
      - usermodule
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: usermodule_api_v1_idea_spark_update
      parameters:
      - in: path
        name: idea_spark_uuid
        schema:
          type: string
        required: true
      tags:
      - usermodule
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: usermodule_api_v1_idea_spark_destroy
      parameters:
      - in: path
        name: idea_spark_uuid
        schema:
          type: string
        required: true
      tags:
      - usermodule
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /usermodule/api/v1/idea-sparks/:
    get:
      operationId: usermodule_api_v1_idea_sparks_retrieve
      tags:
      - usermodule
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: usermodule_api_v1_idea_sparks_create
      tags:
      - usermodule
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /usermodule/api/v1/logout/:
    post:
      operationId: usermodule_api_v1_logout_create
      tags:
      - usermodule
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /usermodule/api/v1/music/{music_uuid}/:
    get:
      operationId: usermodule_api_v1_music_retrieve
      parameters:
      - in: path
        name: music_uuid
        schema:
          type: string
        required: true
      tags:
      - usermodule
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: usermodule_api_v1_music_update
      parameters:
      - in: path
        name: music_uuid
        schema:
          type: string
        required: true
      tags:
      - usermodule
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: usermodule_api_v1_music_destroy
      parameters:
      - in: path
        name: music_uuid
        schema:
          type: string
        required: true
      tags:
      - usermodule
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /usermodule/api/v1/musics/:
    get:
      operationId: usermodule_api_v1_musics_retrieve
      tags:
      - usermodule
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: usermodule_api_v1_musics_create
      tags:
      - usermodule
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /usermodule/api/v1/password_reset/:
    post:
      operationId: usermodule_api_v1_password_reset_create
      description: |-
        An Api View which provides a method to request a password reset token based on an e-mail address

        Sends a signal reset_password_token_created when a reset token was created
      tags:
      - usermodule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Email'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Email'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Email'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Email'
          description: ''
  /usermodule/api/v1/password_reset/confirm/:
    post:
      operationId: usermodule_api_v1_password_reset_confirm_create
      description: An Api View which provides a method to reset a password based on
        a unique token
      tags:
      - usermodule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordToken'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordToken'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordToken'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordToken'
          description: ''
  /usermodule/api/v1/password_reset/validate_token/:
    post:
      operationId: usermodule_api_v1_password_reset_validate_token_create
      description: An Api View which provides a method to verify that a token is valid
      tags:
      - usermodule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetToken'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResetToken'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResetToken'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetToken'
          description: ''
  /usermodule/api/v1/plans/:
    get:
      operationId: usermodule_api_v1_plans_retrieve
      tags:
      - usermodule
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: usermodule_api_v1_plans_create
      tags:
      - usermodule
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /usermodule/api/v1/profile/:
    get:
      operationId: usermodule_api_v1_profile_retrieve
      tags:
      - usermodule
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: usermodule_api_v1_profile_update
      tags:
      - usermodule
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /usermodule/api/v1/resend-otp/{username}/:
    post:
      operationId: usermodule_api_v1_resend_otp_create
      parameters:
      - in: path
        name: username
        schema:
          type: string
        required: true
      tags:
      - usermodule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OTPResend'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OTPResend'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OTPResend'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OTPResend'
          description: ''
  /usermodule/api/v1/signin/:
    post:
      operationId: usermodule_api_v1_signin_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - usermodule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /usermodule/api/v1/signup/:
    post:
      operationId: usermodule_api_v1_signup_create
      tags:
      - usermodule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomUser'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUser'
          description: ''
  /usermodule/api/v1/token/refresh/:
    post:
      operationId: usermodule_api_v1_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - usermodule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /usermodule/api/v1/token/verify/:
    post:
      operationId: usermodule_api_v1_token_verify_create
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      tags:
      - usermodule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerify'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenVerify'
          description: ''
  /usermodule/api/v1/transaction/{transaction_status}/:
    post:
      operationId: usermodule_api_v1_transaction_create
      parameters:
      - in: path
        name: transaction_status
        schema:
          type: string
        required: true
      tags:
      - usermodule
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /usermodule/api/v1/verify-otp/{username}/:
    post:
      operationId: usermodule_api_v1_verify_otp_create
      parameters:
      - in: path
        name: username
        schema:
          type: string
        required: true
      tags:
      - usermodule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OTPVerification'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OTPVerification'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OTPVerification'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OTPVerification'
          description: ''
components:
  schemas:
    BlankEnum:
      enum:
      - ''
    CustomUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        full_name:
          type: string
          nullable: true
          maxLength: 220
        email:
          type: string
          format: email
          maxLength: 254
        password:
          type: string
          writeOnly: true
          maxLength: 128
        user_level:
          $ref: '#/components/schemas/UserLevelEnum'
        device:
          $ref: '#/components/schemas/DeviceEnum'
        weekday:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/WeekdayEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
      required:
      - email
      - id
      - password
      - username
    DeviceEnum:
      enum:
      - computer
      - tablet
      - mobile
      type: string
      description: |-
        * `computer` - Computer
        * `tablet` - Tablet
        * `mobile` - Mobile
    Email:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    NullEnum:
      enum:
      - null
    OTPResend:
      type: object
      properties:
        username:
          type: string
          maxLength: 150
      required:
      - username
    OTPVerification:
      type: object
      properties:
        otp_token:
          type: string
          maxLength: 8
      required:
      - otp_token
    PasswordToken:
      type: object
      properties:
        password:
          type: string
        token:
          type: string
      required:
      - password
      - token
    ResetToken:
      type: object
      properties:
        token:
          type: string
      required:
      - token
    TokenObtainPair:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - email
      - password
      - refresh
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    TokenVerify:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
      required:
      - token
    UserLevelEnum:
      enum:
      - beginners
      - intermediate
      - professional
      type: string
      description: |-
        * `beginners` - Beginners
        * `intermediate` - Intermediate
        * `professional` - Professional
    WeekdayEnum:
      enum:
      - mon
      - tue
      - wed
      - thu
      - fri
      - sat
      - sun
      type: string
      description: |-
        * `mon` - Monday
        * `tue` - Tuesday
        * `wed` - Wednesday
        * `thu` - Thursday
        * `fri` - Friday
        * `sat` - Saturday
        * `sun` - Sunday
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
